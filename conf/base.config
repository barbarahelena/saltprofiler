/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/mag Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

process {

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 7.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = 'retry'
    maxRetries    = 3
    maxErrors     = '-1'
    
    // Default process labels, used by nf-core modules
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

    // Process requirements for local modules
    withName: BOWTIE2_HOST_REMOVAL_BUILD {
        cpus   = { check_max (10    * task.attempt, 'cpus'   ) }
        memory = { check_max (20.GB * task.attempt, 'memory' ) }
        time   = { check_max (4.h   * task.attempt, 'time'   ) }
    }
    withName: BOWTIE2_HOST_REMOVAL_ALIGN {
        cpus   = { check_max (10    * task.attempt, 'cpus'   ) }
        memory = { check_max (10.GB * task.attempt, 'memory' ) }
        time   = { check_max (6.h   * task.attempt, 'time'   ) }
    }
    withName: BOWTIE2_PHIX_REMOVAL_ALIGN {
        cpus   = { check_max (4    * task.attempt, 'cpus'   ) }
        memory = { check_max (8.GB * task.attempt, 'memory' ) }
        time   = { check_max (6.h  * task.attempt, 'time'   ) }
    }
    withName: CAT_DB_GENERATE {
        memory = { check_max (200.GB * task.attempt, 'memory' ) }
        time   = { check_max (16.h   * task.attempt, 'time'   ) }
    }
    withName: CAT {
        cpus   = { check_max (16     * task.attempt, 'cpus'   ) }
        memory = { check_max (80.GB                , 'memory' ) }
        time   = { check_max (12.h  * task.attempt, 'time'   ) }
    }
    //MEGAHIT returns exit code 250 when running out of memory
    withName: MEGAHIT {
        cpus          = { check_megahit_cpus (8, task.attempt  ) }
        memory        = { check_max (40.GB * task.attempt, 'memory' ) }
        time          = { check_max (16.h  * task.attempt, 'time'   ) }
    }
    //SPAdes returns error(1) if it runs out of memory (and for other reasons as well...)!
    //exponential increase of memory and time with attempts, keep number of threads to enable reproducibility
    withName: SPADES {
        cpus          = { check_spades_cpus (10, task.attempt) }
        memory        = { check_max (64.GB * (2**(task.attempt-1)), 'memory' ) }
        time          = { check_max (24.h  * (2**(task.attempt-1)), 'time'   ) }
        maxRetries    = 5
    }
    //returns exit code 247 when running out of memory
    withName: BOWTIE2_ASSEMBLY_BUILD {
        cpus          = { check_max (1      * task.attempt, 'cpus'   ) }
        memory        = { check_max (4.GB   * task.attempt, 'memory' ) }
        time          = { check_max (45.min * task.attempt, 'time'   ) }
    }
    withName: BOWTIE2_ASSEMBLY_ALIGN {
        cpus          = { check_max (2    * task.attempt, 'cpus'   ) }
        memory        = { check_max (2.GB * task.attempt, 'memory' ) }
        time          = { check_max (2.h  * task.attempt, 'time'   ) }
    }
    withName: METABAT2_METABAT2 {
        cpus   = { check_max (8         * task.attempt, 'cpus'   ) }
        memory = { check_max (5.GB      * task.attempt, 'memory' ) }
        time   = { check_max (20.min    * task.attempt, 'time'   ) }
    }
    withName: METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS {
        cpus   = { check_max (1         * task.attempt, 'cpus'   ) }
        memory = { check_max (200.MB    * task.attempt, 'memory' ) }
        time   = { check_max (20.min    * task.attempt, 'time'   ) }
    }
    withName: MAG_DEPTHS {
        memory = { check_max (16.GB * task.attempt, 'memory' ) }
    }
    withName: BUSCO {
        cpus   = { check_max (8     * task.attempt, 'cpus'   ) }
        memory = { check_max (20.GB * task.attempt, 'memory' ) }
    }

    withName: MAXBIN2 {
        // often fails when insufficient information, so we allow it to gracefully fail without failing the pipeline
        errorStrategy = { task.exitStatus in [ 1, 255 ] ? 'ignore' : 'retry' }
    }

    withName: DASTOOL_DASTOOL {
        // if SCGs not found, bins cannot be assigned and DAS_tool will die with exit status 1
        errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : task.exitStatus == 1 ? 'ignore' : 'finish' }
    }

    withName: SALTGENES_FILTER {
        cpus   = { check_max (1         * task.attempt, 'cpus'   ) }
        memory = { check_max (100.MB    * task.attempt, 'memory' ) }
        time   = { check_max (5.min     * task.attempt, 'time'   ) }
    }

    withName: 'SALTGENES_CATPERGENE|SALTGENES_CATPERSAMPLE' {
        cpus   = { check_max (1        * task.attempt, 'cpus'   ) }
        memory = { check_max (50.MB    * task.attempt, 'memory' ) }
        time   = { check_max (5.min    * task.attempt, 'time'   ) }
    }

    withName: SALTGENES_BWAMEM2BUILD {
        cpus   = { check_max (1        * task.attempt, 'cpus'   ) }
        memory = { check_max (50.MB    * task.attempt, 'memory' ) }
        time   = { check_max (5.min    * task.attempt, 'time'   ) }
    }

    withName: SALTGENES_BWAMEM2ALIGN {
        cpus   = { check_max (6         * task.attempt, 'cpus'   ) }
        memory = { check_max (2.GB      * task.attempt, 'memory' ) }
        time   = { check_max (30.min    * task.attempt, 'time'   ) }
    }

    // Nf-core modules with removed process labels (process_single, process_medium, etc) - processes should be migrated to local folder
    withName: PROKKA {
        cpus   = { check_max (2     * task.attempt, 'cpus'   ) }
        memory = { check_max (2.GB  * task.attempt, 'memory' ) }
        time   = { check_max (1.h   * task.attempt, 'time'   ) }
    }
    withName: PRODIGAL {
        cpus   = { check_max (1         * task.attempt, 'cpus'   ) }
        memory = { check_max (200.MB    * task.attempt, 'memory' ) }
        time   = { check_max (2.h       * task.attempt, 'time'   ) }
    }
    withName: ARIA2_UNTAR {
        cpus   = { check_max (10        * task.attempt, 'cpus'   ) }
        memory = { check_max (20.GB     * task.attempt, 'memory' ) }
        time   = { check_max (4.h       * task.attempt, 'time'   ) }
    }
    withName: GUNZIP_BINS {
        cpus   = { check_max (1         * task.attempt, 'cpus'   ) }
        memory = { check_max (200.MB    * task.attempt, 'memory' ) }
        time   = { check_max (20.min    * task.attempt, 'time'   ) }
    }
    withName: CHECKM_LINEAGEWF {
        cpus   = { check_max (4         * task.attempt, 'cpus'   ) }
        memory = { check_max (40.GB     * task.attempt, 'memory' ) }
        time   = { check_max (2.h       * task.attempt, 'time'   ) }
    }
    // process {  
    //     resourceLimits = [   
    //     cpus: 60,    
    //     memory: 124.GB 
    //     ]
    // }
}
