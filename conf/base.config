/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/mag Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

process {
    resourceLimits = [ cpus: 60, memory: 125.GB, time: 72.h ]

    cpus   = {  1    * task.attempt }
    memory = {  7.GB * task.attempt }
    time   = {  4.h  * task.attempt }

    errorStrategy = 'retry'
    maxRetries    = 3
    maxErrors     = '-1'
    
    // Default process labels, used by nf-core modules
    withLabel:process_single {
        cpus   = {  1                   }
        memory = {  6.GB * task.attempt }
        time   = {  4.h  * task.attempt }
    }
    withLabel:process_low {
        cpus   = {  2     * task.attempt }
        memory = {  12.GB * task.attempt }
        time   = {  4.h   * task.attempt }
    }
    withLabel:process_medium {
        cpus   = {  6     * task.attempt }
        memory = {  36.GB * task.attempt }
        time   = {  8.h   * task.attempt }
    }
    withLabel:process_high {
        cpus   = {  12    * task.attempt }
        memory = {  72.GB * task.attempt }
        time   = {  16.h  * task.attempt }
    }
    withLabel:process_long {
        time   = {  20.h  * task.attempt }
    }
    withLabel:process_high_memory {
        memory = {  200.GB * task.attempt }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

    // Process requirements for local modules
    withName: BOWTIE2_HOST_REMOVAL_BUILD {
        cpus   = { 10    * task.attempt }
        memory = { 20.GB * task.attempt }
        time   = { 4.h   * task.attempt }
    }
    withName: BOWTIE2_HOST_REMOVAL_ALIGN {
        cpus   = { 10    * task.attempt }
        memory = { 10.GB * task.attempt }
        time   = { 6.h   * task.attempt }
    }
    withName: BOWTIE2_PHIX_REMOVAL_ALIGN {
        cpus   = { 4    * task.attempt }
        memory = { 8.GB * task.attempt }
        time   = { 6.h  * task.attempt }
    }
    withName: CAT_DB_GENERATE {
        memory = { 200.GB * task.attempt }
        time   = { 16.h   * task.attempt }
    }
    withName: CAT {
        cpus   = { 16     * task.attempt }
        memory = { 60.GB                 }
        time   = { 12.h  * task.attempt  }
    }
    withName: KRAKEN2 {
        cpus   = { 16    * task.attempt }
        memory = { 16.GB * task.attempt }
        time   = { 1.h  * task.attempt  }
    }
    //MEGAHIT returns exit code 250 when running out of memory
    withName: MEGAHIT {
        cpus          = { check_megahit_cpus (8, task.attempt  ) }
        memory        = { 40.GB * task.attempt }
        time          = { 16.h  * task.attempt }
    }
    //SPAdes returns error(1) if it runs out of memory (and for other reasons as well...)!
    //exponential increase of memory and time with attempts, keep number of threads to enable reproducibility
    withName: SPADES {
        cpus          = { check_spades_cpus (10, task.attempt) }
        memory        = { 64.GB * (2**(task.attempt-1)) }
        time          = { 24.h  * (2**(task.attempt-1)) }
        maxRetries    = 5
    }
    //returns exit code 247 when running out of memory
    withName: BOWTIE2_ASSEMBLY_BUILD {
        cpus          = { 1      * task.attempt }
        memory        = { 4.GB   * task.attempt }
        time          = { 1.h    * task.attempt }
    }
    withName: BOWTIE2_ASSEMBLY_ALIGN {
        cpus          = { 2     * task.attempt }
        memory        = { 20.GB * task.attempt }
        time          = { 4.h   * task.attempt }
    }
    withName: METABAT2_METABAT2 {
        cpus   = { 8         * task.attempt }
        memory = { 5.GB      * task.attempt }
        time   = { 20.min    * task.attempt }
    }
    withName: METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS {
        cpus   = { 1         * task.attempt }
        memory = { 200.MB    * task.attempt }
        time   = { 20.min    * task.attempt }
    }
    withName: MAG_DEPTHS {
        memory = { 16.GB * task.attempt }
    }
    withName: BUSCO {
        cpus   = { 8     * task.attempt }
        memory = { 20.GB * task.attempt }
    }

    withName: MAXBIN2 {
        // often fails when insufficient information, so we allow it to gracefully fail without failing the pipeline
        errorStrategy = { task.exitStatus in [ 1, 255 ] ? 'ignore' : 'retry' }
    }

    withName: DASTOOL_DASTOOL {
        // if SCGs not found, bins cannot be assigned and DAS_tool will die with exit status 1
        errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : task.exitStatus == 1 ? 'ignore' : 'finish' }
    }

    withName: SALTGENES_FILTER {
        cpus   = { 1         * task.attempt }
        memory = { 100.MB    * task.attempt }
        time   = { 5.min     * task.attempt }
    }

    withName: 'SALTGENES_CATPERGENE|SALTGENES_CATPERSAMPLE' {
        cpus   = { 1        * task.attempt }
        memory = { 50.MB    * task.attempt }
        time   = { 5.min    * task.attempt }
    }

    withName: SALTGENES_BWAMEM2BUILD {
        cpus   = { 1        * task.attempt }
        memory = { 50.MB    * task.attempt }
        time   = { 5.min    * task.attempt }
    }

    withName: SALTGENES_BWAMEM2ALIGN {
        cpus   = { 6         * task.attempt }
        memory = { 2.GB      * task.attempt }
        time   = { 30.min    * task.attempt }
    }

    // Nf-core modules with removed process labels (process_single, process_medium, etc) - processes should be migrated to local folder
    withName: PROKKA {
        cpus   = { 2     * task.attempt }
        memory = { 2.GB  * task.attempt }
        time   = { 1.h   * task.attempt }
    }
    withName: PRODIGAL {
        cpus   = { 1         * task.attempt }
        memory = { 2.GB      * task.attempt }
        time   = { 4.h       * task.attempt }
    }
    withName: ARIA2_UNTAR {
        cpus   = { 10        * task.attempt }
        memory = { 20.GB     * task.attempt }
        time   = { 4.h       * task.attempt }
    }
    withName: GUNZIP_BINS {
        cpus   = { 1         * task.attempt }
        memory = { 200.MB    * task.attempt }
        time   = { 20.min    * task.attempt }
    }
    withName: CHECKM_LINEAGEWF {
        cpus   = { 4         * task.attempt }
        memory = { 40.GB     * task.attempt }
        time   = { 2.h       * task.attempt }
    }
}
