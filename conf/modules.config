/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    //default: do not publish into the results folder
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        enabled: false
    ]

    withName: FASTQC_RAW {
        ext.args   = '--quiet'
        publishDir = [
            path: { "${params.outdir}/QC_shortreads/fastqc" },
            mode: params.publish_dir_mode,
            pattern: "*.html"
        ]
        ext.prefix = { "${meta.id}_run${meta.run}_raw" }
        tag        = { "${meta.id}_run${meta.run}_raw" }
    }

    withName: FASTP {
        ext.args   = [
            "-q ${params.fastp_qualified_quality}",
            "--cut_front",
            "--cut_tail",
            "--cut_mean_quality ${params.fastp_cut_mean_quality}",
            "--length_required ${params.reads_minlength}"
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/QC_shortreads/fastp/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,json}"
            ],
            [
                path: { "${params.outdir}/QC_shortreads/fastp/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz",
                enabled: params.save_clipped_reads
            ]
        ]
        ext.prefix = { "${meta.id}_run${meta.run}_fastp" }
        tag        = { "${meta.id}_run${meta.run}" }
    }

    withName: ADAPTERREMOVAL_PE {
        ext.args   = [
            "--minlength ${params.reads_minlength}",
            "--adapter1 ${params.adapterremoval_adapter1} --adapter2 ${params.adapterremoval_adapter2}",
            "--minquality ${params.adapterremoval_minquality} --trimns",
            params.adapterremoval_trim_quality_stretch ? "--trim_qualities" : "--trimwindows 4"
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/QC_shortreads/adapterremoval/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.{settings}"
            ],
            [
                path: { "${params.outdir}/QC_shortreads/adapterremoval/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.{truncated,discarded}.gz",
                enabled: params.save_clipped_reads
            ]
        ]
        ext.prefix = { "${meta.id}_run${meta.run}_ar2" }
        tag        = { "${meta.id}_run${meta.run}" }
    }

    withName: ADAPTERREMOVAL_SE {
        ext.args   = [
            "--minlength ${params.reads_minlength}",
            "--adapter1 ${params.adapterremoval_adapter1}",
            "--minquality ${params.adapterremoval_minquality} --trimns",
            params.adapterremoval_trim_quality_stretch ? "--trim_qualities" : "--trimwindows 4"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/QC_shortreads/adapterremoval/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{settings}"
        ]
        ext.prefix = { "${meta.id}_run${meta.run}_ar2" }
        tag        = { "${meta.id}_run${meta.run}" }
    }

    withName: BOWTIE2_PHIX_REMOVAL_ALIGN {
        ext.prefix = { "${meta.id}_run${meta.run}_phix_removed" }
        publishDir = [
            [
                path: { "${params.outdir}/QC_shortreads/remove_phix" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ],
            [
                path: { "${params.outdir}/QC_shortreads/remove_phix" },
                mode: params.publish_dir_mode,
                pattern: "*.unmapped*.fastq.gz",
                enabled: params.save_phixremoved_reads
            ]
        ]
        tag        = { "${meta.id}_run${meta.run}" }
    }

    withName: BOWTIE2_HOST_REMOVAL_ALIGN {
        ext.args   = params.host_removal_verysensitive ? "--very-sensitive" : "--sensitive"
        ext.args2  = params.host_removal_save_ids ? "--host_removal_save_ids" : ''
        ext.prefix = { "${meta.id}_run${meta.run}_host_removed" }
        publishDir = [
            [
                path: { "${params.outdir}/QC_shortreads/remove_host" },
                mode: params.publish_dir_mode,
                pattern: "*{.log,read_ids.txt}"
            ],
            [
                path: { "${params.outdir}/QC_shortreads/remove_host" },
                mode: params.publish_dir_mode,
                pattern: "*.unmapped*.fastq.gz",
                enabled: params.save_hostremoved_reads
            ]
        ]
        tag        = { "${meta.id}_run${meta.run}" }
    }

    withName: FASTQC_TRIMMED {
        ext.args   = '--quiet'
        ext.prefix = { "${meta.id}_run${meta.run}_trimmed" }
        publishDir = [
            path: { "${params.outdir}/QC_shortreads/fastqc" },
            mode: params.publish_dir_mode,
            pattern: "*.html"
        ]
        tag        = { "${meta.id}_run${meta.run}" }
    }

    withName: BBMAP_BBNORM {
        ext.args   = [
            params.bbnorm_target ? "target=${params.bbnorm_target}" : '',
            params.bbnorm_min ? "min=${params.bbnorm_min}" : ''
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/bbmap/bbnorm/logs" },
                enabled: params.save_bbnorm_reads,
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ],
            [
                path: { "${params.outdir}/bbmap/bbnorm/" },
                mode: 'copy',
                enabled: params.save_bbnorm_reads,
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz"
            ]
        ]
    }

    //pattern: "*.{fa.gz,log}" //'pattern' didnt work, probably because the output is in a folder, solved with 'saveAs'
    withName: MEGAHIT {
        ext.args   = params.megahit_options ?: ''
        publishDir = [
            path: { "${params.outdir}/Assembly" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                filename.equals('versions.yml')
                    ? null
                    : filename.indexOf('.contigs.fa.gz') > 0
                        ? filename
                        : filename.indexOf('.log') > 0 ? filename : null
            }
        ]
    }

    withName: SPADES {
        ext.args   = params.spades_options ?: ''
        publishDir = [
            path: { "${params.outdir}/Assembly/SPAdes" },
            mode: params.publish_dir_mode,
            pattern: "*.{fasta.gz,gfa.gz,log}"
        ]
    }

    withName: QUAST {
        publishDir = [
            path: { "${params.outdir}/Assembly/${meta.assembler}/QC/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BOWTIE2_ASSEMBLY_ALIGN {
        ext.prefix = { "${meta.id}.assembly" }
        publishDir = [
            [
                path: { "${params.outdir}/Assembly/${assembly_meta.assembler}/QC/${assembly_meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ],
            [
                path: { "${params.outdir}/Assembly/${assembly_meta.assembler}/QC/${assembly_meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.{bam,bai}",
                enabled: params.save_assembly_mapped_reads
            ]
        ]
    }

    withName: 'MAG_DEPTHS_PLOT|MAG_DEPTHS_SUMMARY' {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/depths/bins" },
            mode: params.publish_dir_mode,
            pattern: "*.{png,tsv}"
        ]
    }

    withName: BIN_SUMMARY {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning" },
            mode: params.publish_dir_mode,
            pattern: "*.{png,tsv}"
        ]
    }

    withName: BUSCO_DB_PREPARATION {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/BUSCO" },
            mode: params.publish_dir_mode,
            pattern: "*.tar.gz"
        ]
    }

    withName: BUSCO {
        ext.args   = [
            params.busco_db ? '--offline' : ''
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/BUSCO" },
            mode: params.publish_dir_mode,
            pattern: "*.{log,err,faa.gz,fna.gz,gff,txt}"
        ]
    }

    withName: BUSCO_SAVE_DOWNLOAD {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/BUSCO" },
            mode: params.publish_dir_mode,
            overwrite: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BUSCO_SUMMARY|QUAST_BINS|QUAST_BINS_SUMMARY' {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ARIA2_UNTAR {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/CheckM/checkm_downloads" },
            mode: params.publish_dir_mode,
            overwrite: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_checkm_data
        ]
    }

    withName: CHECKM_LINEAGEWF {
        tag        = { "${meta.assembler}-${meta.binner}-${meta.domain}-${meta.refinement}-${meta.id}" }
        ext.prefix = { "${meta.assembler}-${meta.binner}-${meta.domain}-${meta.refinement}-${meta.id}_wf" }
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/CheckM" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CHECKM_QA {
        ext.prefix = { "${meta.assembler}-${meta.binner}-${meta.domain}-${meta.refinement}-${meta.id}_qa" }
        ext.args   = "-o 2 --tab_table"
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/CheckM" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COMBINE_CHECKM_QA_TSV {
        ext.prefix = { "checkm_summary" }
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COMBINE_CHECKM_LIN_TSV {
        ext.prefix = { "checkm_lin_summary" }
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GALAH {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/Galah" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CAT_DB_GENERATE {
        publishDir = [
            path: { "${params.outdir}/Taxonomy/CAT" },
            mode: params.publish_dir_mode,
            pattern: "*.tar.gz"
        ]
    }

    withName: CAT {
        publishDir = [
            path: { "${params.outdir}/Taxonomy/CAT/${meta.assembler}/${meta.binner}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: CAT_SUMMARY {
        ext.prefix = "cat_summary"
        publishDir = [
            path: { "${params.outdir}/Taxonomy/CAT/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: KRAKEN2 {
        publishDir = [
            path: { "${params.outdir}/KRAKEN/samples" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'COMBINE_SUMMARY_TSV|COMBINE_SUMMARY_TSV_SALTGENES' {
        publishDir = [
            path: { "${params.outdir}/KRAKEN/merged" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: PROKKA {
        ext.args   = "--metagenome --compliant --centre NVI"
        publishDir = [
            path: { "${params.outdir}/Annotation/Prokka/${meta.assembler}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PRODIGAL {
        ext.args   = "-p meta"
        publishDir = [
            path: { "${params.outdir}/Annotation/Prodigal/${meta.assembler}/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/depths/contigs" },
            mode: params.publish_dir_mode,
            pattern: '*-depth.txt.gz'
        ]
        ext.prefix = { "${meta.assembler}-${meta.id}-depth" }
    }

    withName: METABAT2_METABAT2 {
        publishDir = [
            [
                path: { "${params.outdir}/GenomeBinning/MetaBAT2/bins/" },
                mode: params.publish_dir_mode,
                pattern: '*[!lowDepth|tooShort|unbinned].fa.gz'
            ],
            [
                path: { "${params.outdir}/GenomeBinning/MetaBAT2/discarded" },
                mode: params.publish_dir_mode,
                pattern: '*tooShort.fa.gz'
            ],
            [
                path: { "${params.outdir}/GenomeBinning/MetaBAT2/discarded" },
                mode: params.publish_dir_mode,
                pattern: '*lowDepth.fa.gz'
            ]
        ]
        ext.prefix = { "${meta.assembler}-MetaBAT2-${meta.id}" }
        ext.args   = [
            params.min_contig_size < 1500 ? "-m 1500" : "-m ${params.min_contig_size}",
            "--unbinned",
            "--seed ${params.metabat_rng_seed}"
        ].join(' ').trim()
    }

    withName: 'SALTGENES_FILTER' {
        publishDir = [
            path: { "${params.outdir}/Annotation/Saltgenes/genesperbin/${gene}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALTGENES_CATPERSAMPLE|SALTGENES_BWAMEM2ALIGN' {
        publishDir = [
            path: { "${params.outdir}/Annotation/Saltgenes/${subjectid}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALTGENES_CATPERGENE|SALTGENES_MUSCLE|SALTGENES_FASTTREE' {
        publishDir = [
            path: { "${params.outdir}/Annotation/Saltgenes/${subjectid}/${gene}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SPLIT_FASTA {
        publishDir = [
            [
                path: { "${params.outdir}/GenomeBinning/${meta.binner}/unbinned" },
                mode: params.publish_dir_mode,
                pattern: '*.*[0-9].fa.gz'
            ],
            [
                path: { "${params.outdir}/GenomeBinning/${meta.binner}/unbinned/discarded" },
                mode: params.publish_dir_mode,
                pattern: '*.pooled.fa.gz'
            ],
            [
                path: { "${params.outdir}/GenomeBinning/${meta.binner}/unbinned/discarded" },
                mode: params.publish_dir_mode,
                pattern: '*.remaining.fa.gz'
            ]
        ]
    }

    withName: MULTIQC {
        ext.args   = { params.multiqc_title ? "--title \"${params.multiqc_title}\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
